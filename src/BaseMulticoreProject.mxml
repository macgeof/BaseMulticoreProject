<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   applicationDPI="160"
			   implements="com.gb.puremvc.interfaces.IShell"
			   creationComplete="_startupApplication()">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<fx:Metadata>
		[Event('logLevel')]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.gb.puremvc.model.messages.LogMessage;
			import com.generatorsystems.projects.multicoredemo.ShellFacade;
			import com.generatorsystems.projects.multicoredemo.controller.StartupCommand;
			import com.generatorsystems.projects.multicoredemo.model.enums.Cores;
			import com.generatorsystems.projects.multicoredemo.view.ShellMediator;
			
			import mx.effects.easing.*;
			import mx.events.EffectEvent;
			
			import org.puremvc.as3.multicore.patterns.facade.Facade;
			
			import spark.components.Button;
			import spark.components.TitleWindow;
			import spark.core.SpriteVisualElement;
		
			private var _facade:ShellFacade;
			
			public static const LOG_LEVEL:String  	= "logLevel";
			public static const NAME:String 		= 'BaseMulticoreProject';
			protected static const KILL_LOGGER:String = "Kill Logger";
			protected static const CREATE_LOGGER:String = "Create Logger";
			protected static const KILL_WELCOME:String = "Kill Welcome";
			protected static const CREATE_WELCOME:String = "Create Welcome";
			
			[Bindable] public var logLevel:Number;
			[Bindable] protected var killCreateButtonLabel:String = KILL_LOGGER;
			[Bindable] protected var killCreateWelcomeLabel:String = KILL_WELCOME;
			
			private var _logButton:Button;
			private var _logWindow:TitleWindow;
			
			public function set logWindow(value:TitleWindow):void
			{
				_logWindow = value;
			}

			public function get logWindow():TitleWindow
			{
				return _logWindow;
			}

			public function get logButton():Button
			{
				return _logButton;
			}
			
			private function _startupApplication():void
			{
				_facade = ShellFacade.getInstance(Cores.SHELL);
				_facade.startup(this, StartupCommand);
			}
			
			public function get applicationMediator():Class
			{
				return ShellMediator;
			}
			
			/**
			* Adds the module-manufactured LogButton to the 
			* view for display.
			*/
			public function addLogButton(__logButton:Button):void
			{
				_logButton = __logButton;
				toolbar.addElement(_logButton);
			}
			
			/**
			* Adds the module-manufactured LogWindows to the 
			* view for display.
			*/
			public function addLogWindow():void
			{
				var __maskDispObj:SpriteVisualElement = new SpriteVisualElement();
				__maskDispObj.graphics.beginFill(0xFF0000, 1);
				__maskDispObj.graphics.drawRect(0,0,logBox.width,logBox.height);
				__maskDispObj.graphics.endFill();
				logBox.addElement(__maskDispObj);
				logBox.addElementAt(_logWindow,0);
				_logWindow.mask = __maskDispObj;
				_logWindow = _logWindow;
			}
			
			/**
			* Remove the module-manufactured LogWindow from the 
			* view.
			*/
			public function removeLogWindow():void
			{
				_logWindow.addEventListener(EffectEvent.EFFECT_END, _logWindowRemovedEffectHandler);
				logBox.removeElement(_logWindow);
			}
			
			protected function _logWindowRemovedEffectHandler(__event:EffectEvent):void
			{
				var __logWindow:TitleWindow = __event.currentTarget as TitleWindow;
				__logWindow.removeEventListener(EffectEvent.EFFECT_END, _logWindowRemovedEffectHandler);
				var __mask:SpriteVisualElement = __logWindow.mask as SpriteVisualElement;
				__logWindow.mask = null;
				logBox.removeElement(__mask);
			}
			
			/**
			* Dispatch events.
			*/
			private function submit( __action:String ):void
			{
				switch ( __action )
				{
					
				 	case LOG_LEVEL:
						logLevel = cmbLogLevel.selectedIndex;
						dispatchEvent( new Event( LOG_LEVEL, true ));
						break; 
				}
			}
			
			public function removeLogGUI():void
			{
				if (_logButton && toolbar.containsElement(_logButton)) toolbar.removeElement(_logButton);
				_logButton = null;
				if (_logWindow)
				{
					if (_logWindow.hasEventListener(EffectEvent.EFFECT_END)) _logWindow.removeEventListener(EffectEvent.EFFECT_END, _logWindowRemovedEffectHandler);
					if (logBox.contains(_logWindow)) logBox.removeElement(_logWindow);
					_logWindow = null;
				}
			}
			
			protected function killCreateLogger_clickHandler(event:MouseEvent):void
			{
				//logic for label changing may seem wrong way round, but label is updated before the core is created/destroyed ;)
				killCreateButtonLabel = (Facade.hasCore(Cores.LOGGER)) ? CREATE_LOGGER : KILL_LOGGER;
			}
			
			protected function killCreateWelcome_clickHandler(event:MouseEvent):void
			{
				//logic for label changing may seem wrong way round, but label is updated before the core is created/destroyed ;)
				killCreateWelcomeLabel = (Facade.hasCore(Cores.WELCOME)) ? CREATE_WELCOME : KILL_WELCOME;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	<s:VGroup fontFamily="Georgia">
		<s:HGroup id="toolbar" width="1280" height="90" fontFamily="Georgia" gap="20"
				  paddingBottom="30" paddingLeft="40" paddingRight="40" paddingTop="30"
				  verticalAlign="bottom">
			<s:Button id="killCreateLogger" label="{killCreateButtonLabel}" click="killCreateLogger_clickHandler(event)" />
			<s:Button id="killCreateWelcome" label="{killCreateWelcomeLabel}" click="killCreateWelcome_clickHandler(event)" />
		</s:HGroup>
		
		<s:HGroup width="1280" height="40" gap="20" paddingBottom="10" paddingLeft="30"
				  paddingRight="30" paddingTop="10" verticalAlign="middle">
			<s:Label text="Log Level:"/>
			<s:DropDownList id="cmbLogLevel" change="submit( LOG_LEVEL )"
						dataProvider="{LogMessage.LEVELS}" selectedIndex="{LogMessage.DEBUG}"/>
		</s:HGroup>
	</s:VGroup>

	
	<!-- The Log Window  -->
	<s:VGroup x="0" y="0" width="100%" height="100%">
		<s:BorderContainer id="logBox" height="50%" width="100%" />
		<s:BorderContainer id="coreContainer" height="50%" width="100%" />
	</s:VGroup>
</s:Application>
